package skip32

import (
	"bytes"
	"testing"
)

var testCases = [][][]byte{
	// { {key}, {plain}, {encrypted} }
	{{0x00, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11}, {0x33, 0x22, 0x11, 0x00}, {0x81, 0x9d, 0x5f, 0x1f}},
	{{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x00, 0x00}, {0xb8, 0xe4, 0xfe, 0xa5}},
	{{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, {0xff, 0xff, 0xff, 0xff}, {0x3b, 0xfb, 0xf9, 0x8e}},
	{{0x45, 0x26, 0xef, 0xbb, 0x01, 0x2a, 0x7f, 0x88, 0xe8, 0xcd}, {0x95, 0xc4, 0xc9, 0xdb}, {0x75, 0xe9, 0x4d, 0x7a}},
	{{0xa8, 0x29, 0x87, 0xf2, 0x2c, 0xc4, 0x99, 0x7a, 0x23, 0x90}, {0xf6, 0x7a, 0x81, 0xce}, {0xc3, 0x61, 0x7a, 0xdb}},
	{{0x20, 0x7a, 0x2f, 0x44, 0xc9, 0x23, 0x15, 0x23, 0x36, 0xdd}, {0xb8, 0x70, 0xe0, 0xe9}, {0xac, 0x9d, 0xad, 0x92}},
	{{0x95, 0x85, 0xa2, 0xe9, 0xcf, 0x1f, 0x33, 0xf3, 0x7f, 0x9b}, {0x30, 0x25, 0xab, 0xa5}, {0xcc, 0xb8, 0x10, 0xa3}},
	{{0xe1, 0x40, 0x6e, 0x07, 0xbb, 0x57, 0x82, 0x91, 0x84, 0x39}, {0xc6, 0x65, 0x11, 0x3a}, {0x84, 0x81, 0xbe, 0x8f}},
	{{0xab, 0x19, 0xac, 0xf4, 0xb2, 0x8a, 0x2e, 0x39, 0x4b, 0xb4}, {0xa8, 0xb0, 0x88, 0xd2}, {0x0e, 0xa3, 0xce, 0x05}},
	{{0x0b, 0xc5, 0xf2, 0xe6, 0x7b, 0xa1, 0x5c, 0xea, 0x40, 0x7c}, {0xae, 0x30, 0x0d, 0x01}, {0x95, 0xfa, 0xd5, 0xbe}},
	{{0x81, 0x08, 0x7b, 0x02, 0x43, 0x3f, 0xd2, 0x50, 0x4d, 0x45}, {0x9f, 0x66, 0x68, 0xa3}, {0x91, 0x63, 0x06, 0xc3}},
	{{0xc6, 0x65, 0xa3, 0xdd, 0x2d, 0xa1, 0x8c, 0x45, 0x93, 0xc0}, {0xea, 0x91, 0x79, 0xfb}, {0x71, 0xa5, 0x5e, 0xb9}},
}

func TestEncrypt(t *testing.T) {
	for i, test := range testCases {
		encrypted := Encrypt(test[0], test[1])
		if !bytes.Equal(test[2], encrypted) {
			t.Errorf("Encrypt error(%d): expected %x, got %x:", i, test[2], encrypted)
		}
	}
}

func TestDecrypt(t *testing.T) {
	for i, test := range testCases {
		decrypted := Decrypt(test[0], test[1])
		if !bytes.Equal(test[1], decrypted) {
			t.Errorf("Decrypt error(%d): expected %x, got %x:", i, test[1], decrypted)
		}
	}
}
